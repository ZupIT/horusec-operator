// Code generated by MockGen. DO NOT EDIT.
// Source: internal/horusec/usecase/kubeclient.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "k8s.io/api/apps/v1"
	autoscalingv2beta2 "k8s.io/api/autoscaling/v2beta2"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"

	v2alpha1 "github.com/ZupIT/horusec-operator/api/v2alpha1"
	k8s "github.com/ZupIT/horusec-operator/internal/k8s"
)

// MockKubernetesClient is a mock of KubernetesClient interface.
type MockKubernetesClient struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesClientMockRecorder
}

// MockKubernetesClientMockRecorder is the mock recorder for MockKubernetesClient.
type MockKubernetesClientMockRecorder struct {
	mock *MockKubernetesClient
}

// NewMockKubernetesClient creates a new mock instance.
func NewMockKubernetesClient(ctrl *gomock.Controller) *MockKubernetesClient {
	mock := &MockKubernetesClient{ctrl: ctrl}
	mock.recorder = &MockKubernetesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesClient) EXPECT() *MockKubernetesClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockKubernetesClient) Apply(ctx context.Context, objects k8s.Objects) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", ctx, objects)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockKubernetesClientMockRecorder) Apply(ctx, objects interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockKubernetesClient)(nil).Apply), ctx, objects)
}

// ListAutoscalingByOwner mocks base method.
func (m *MockKubernetesClient) ListAutoscalingByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]autoscalingv2beta2.HorizontalPodAutoscaler, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAutoscalingByOwner", ctx, owner)
	ret0, _ := ret[0].([]autoscalingv2beta2.HorizontalPodAutoscaler)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAutoscalingByOwner indicates an expected call of ListAutoscalingByOwner.
func (mr *MockKubernetesClientMockRecorder) ListAutoscalingByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAutoscalingByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListAutoscalingByOwner), ctx, owner)
}

// ListDeploymentsByOwner mocks base method.
func (m *MockKubernetesClient) ListDeploymentsByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]v1.Deployment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeploymentsByOwner", ctx, owner)
	ret0, _ := ret[0].([]v1.Deployment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeploymentsByOwner indicates an expected call of ListDeploymentsByOwner.
func (mr *MockKubernetesClientMockRecorder) ListDeploymentsByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeploymentsByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListDeploymentsByOwner), ctx, owner)
}

// ListIngressByOwner mocks base method.
func (m *MockKubernetesClient) ListIngressByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]networkingv1.Ingress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListIngressByOwner", ctx, owner)
	ret0, _ := ret[0].([]networkingv1.Ingress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListIngressByOwner indicates an expected call of ListIngressByOwner.
func (mr *MockKubernetesClientMockRecorder) ListIngressByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListIngressByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListIngressByOwner), ctx, owner)
}

// ListJobsByOwner mocks base method.
func (m *MockKubernetesClient) ListJobsByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]batchv1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListJobsByOwner", ctx, owner)
	ret0, _ := ret[0].([]batchv1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListJobsByOwner indicates an expected call of ListJobsByOwner.
func (mr *MockKubernetesClientMockRecorder) ListJobsByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListJobsByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListJobsByOwner), ctx, owner)
}

// ListPodsByOwner mocks base method.
func (m *MockKubernetesClient) ListPodsByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]corev1.Pod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPodsByOwner", ctx, owner)
	ret0, _ := ret[0].([]corev1.Pod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPodsByOwner indicates an expected call of ListPodsByOwner.
func (mr *MockKubernetesClientMockRecorder) ListPodsByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPodsByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListPodsByOwner), ctx, owner)
}

// ListServiceAccountsByOwner mocks base method.
func (m *MockKubernetesClient) ListServiceAccountsByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]corev1.ServiceAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceAccountsByOwner", ctx, owner)
	ret0, _ := ret[0].([]corev1.ServiceAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServiceAccountsByOwner indicates an expected call of ListServiceAccountsByOwner.
func (mr *MockKubernetesClientMockRecorder) ListServiceAccountsByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAccountsByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListServiceAccountsByOwner), ctx, owner)
}

// ListServicesByOwner mocks base method.
func (m *MockKubernetesClient) ListServicesByOwner(ctx context.Context, owner *v2alpha1.HorusecPlatform) ([]corev1.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServicesByOwner", ctx, owner)
	ret0, _ := ret[0].([]corev1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServicesByOwner indicates an expected call of ListServicesByOwner.
func (mr *MockKubernetesClientMockRecorder) ListServicesByOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServicesByOwner", reflect.TypeOf((*MockKubernetesClient)(nil).ListServicesByOwner), ctx, owner)
}

// UpdateHorusStatus mocks base method.
func (m *MockKubernetesClient) UpdateHorusStatus(ctx context.Context, horus *v2alpha1.HorusecPlatform) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHorusStatus", ctx, horus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHorusStatus indicates an expected call of UpdateHorusStatus.
func (mr *MockKubernetesClientMockRecorder) UpdateHorusStatus(ctx, horus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHorusStatus", reflect.TypeOf((*MockKubernetesClient)(nil).UpdateHorusStatus), ctx, horus)
}
